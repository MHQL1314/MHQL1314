


PYTHON_SCRIPT=$(cat << 'END'

import os
import shutil
import yaml
from pathlib import Path
import sys
import importlib.util
import ast

def load_yaml_config(config_path):
   
    try:
        with open(config_path, 'r', encoding='utf-8') as file:
            config = yaml.safe_load(file)
            return config
    except Exception as e:
        print(f"无法加载 YAML 配置文件 {config_path}. 错误: {e}")
        return None

def load_py_config(config_path):

    try:
        
        module_name = os.path.splitext(os.path.basename(config_path))[0]
        spec = importlib.util.spec_from_file_location(module_name, config_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)

        
        required_vars = ['source_folder', 'output_folder', 'target_markers', 'search_values']

        
        config = {}
        for var in required_vars:
            if hasattr(module, var):
                config[var] = getattr(module, var)
            else:
                print(f"Python 配置文件 {config_path} 中缺少 '{var}'。")
                return None

        
        config['search_values'] = [list(pair) if isinstance(pair, tuple) else pair for pair in config['search_values']]

        return config
    except Exception as e:
        print(f"无法加载 Python 配置文件 {config_path}. 错误: {e}")
        return None

def load_config(config_path):

    if config_path.endswith('.yaml') or config_path.endswith('.yml'):
        return load_yaml_config(config_path)
    elif config_path.endswith('.py'):
        return load_py_config(config_path)
    else:
        print(f"不支持的配置文件格式: {config_path}")
        return None

def find_and_copy_dat_files(source_folder, output_folder, search_pairs, target_markers, min_occurrences=5):

    
    Path(output_folder).mkdir(parents=True, exist_ok=True)

    
    特征值1_hex = target_markers.get('特征值1')
    特征值2_hex = target_markers.get('特征值2')

    if not 特征值1_hex or not 特征值2_hex:
        print("配置文件中缺少 '特征值1' 或 '特征值2'。")
        return

    try:
        特征值1_value = bytes.fromhex(特征值1_hex)  
        特征值2_value = bytes.fromhex(特征值2_hex)  
    except ValueError as e:
        print(f"十六进制转换错误: {e}")
        return

    for pair in search_pairs:
        if not isinstance(pair, (list, tuple)):
            print(f"无效的搜索对: {pair}. 跳过。")
            continue

        
        if len(pair) == 1:
            decimal_number = pair[0]
            try:
                byte_value = decimal_number.to_bytes(4, byteorder='little', signed=True)
            except OverflowError as e:
                print(f"转换错误: {e}. 跳过对 {pair}.")
                continue
            print(f"查找的十进制数: {decimal_number}")
        elif len(pair) == 2:
            decimal_number1, decimal_number2 = pair
            try:
                byte_value1 = decimal_number1.to_bytes(4, byteorder='little', signed=True)
                byte_value2 = decimal_number2.to_bytes(4, byteorder='little', signed=True)
            except OverflowError as e:
                print(f"转换错误: {e}. 跳过对 {pair}.")
                continue
            print(f"十进制数对: ({decimal_number1}, {decimal_number2})")
        else:
            print(f"无效的搜索对: {pair}. 跳过。")
            continue

        
        for root, dirs, files in os.walk(source_folder):
            for file in files:
                if file.lower().endswith(''):
                    file_path = os.path.join(root, file)
                    try:
                        with open(file_path, 'rb') as f:
                            data = f.read()
                            
                            count1 = data.count(特征值1_value)
                            count2 = data.count(特征值2_value)
                            if count1 >= min_occurrences and count2 >= min_occurrences:
                                if len(pair) == 1:
                                    
                                    if byte_value in data:
                                        print(f"找到包含 {decimal_number} 的文件: {file_path}")
                                        shutil.copy(file_path, output_folder)
                                    else:
                                        continue
                                elif len(pair) == 2:
                                    
                                    if byte_value1 in data or byte_value2 in data:
                                        print(f"找到包含 {decimal_number1} 或 {decimal_number2} 的文件: {file_path}")
                                        shutil.copy(file_path, output_folder)
                                    else:
                                        continue
                            else:
                               continue
                    except Exception as e:
                        print(f"无法读取文件 {file_path}. 错误: {e}")

def main():
    
    config_files = ['伪实体配置.yaml', '伪实体配置.py']

    
    existing_configs = [f for f in config_files if os.path.exists(f)]

    if not existing_configs:
        print("未找到任何配置文件。请确保 '伪实体配置.yaml' 或 '伪实体配置.py' 存在于当前目录。")
        sys.exit(1)
    elif len(existing_configs) == 1:
        config_file = existing_configs[0]
        print(f"使用配置文件: {config_file}")
    else:
        print("检测到多个配置文件:")
        for idx, f in enumerate(existing_configs, 1):
            print(f"{idx}. {f}")
        while True:
          choice = input("请选择要使用的配置文件 (输入1或2)，输入 'exit' 退出: ")
          if choice.lower() in ['exit', 'exit']:
            print("已退出。")
            sys.exit(0)
          elif choice in ['1', '2']:
            config_file = existing_configs[int(choice)-1]
            print(f"使用配置文件: {config_file}")
            break
          else:
            print("无效的选择。请输入1或2，或输入 'q' 退出。")

    
    config = load_config(config_file)
    if config:
        search_pairs = config.get('search_values', [])
        source_folder = config.get('source_folder', '')
        output_folder = config.get('output_folder', '')
        target_markers = config.get('target_markers', {})

        if isinstance(search_pairs, list):
            find_and_copy_dat_files(source_folder, output_folder, search_pairs, target_markers)
        else:
            print("配置文件中 'search_values' 应该是一个列表。")
    else:
        print("加载配置失败。")

if __name__ == "__main__":
    main()
               

END
)


TEMP_PYTHON_SCRIPT=$(mktemp)
echo "$PYTHON_SCRIPT" > "$TEMP_PYTHON_SCRIPT"


python "$TEMP_PYTHON_SCRIPT"


rm "$TEMP_PYTHON_SCRIPT"